#!/bin/bash
# Input validation 
if [ "$#" -ne 1 ]; then
    echo "Usage: $0 <input_file.tsv>"
    exit 1
fi

# Check if the file exist
check_file_exist() {
    for file in "$@"; do
        if [ ! -f "$file" ]; then
            echo "Input file $file does not exist."
            exit 1
        fi
    done
}

# Check for tab delimitation
check_tab_separator() {
    for file in "$@"; do
        first_line=$(head -n 1 "$file")
        if [[ "$first_line" != *$'\t'* ]]; then
            echo "File $file is not tsv file."
            exit 1
        fi
    done
}

# Clean columns and remove empty rows
clean_columns(){
    temp=$(mktemp)
    awk -F'\t' -v col1="$3" -v col2="$4" 'NR == 1 || ($col1 != "" && $col2 != "")' "$1" > "$temp"
    awk -F'\t' -v col1="$3" -v col2="$4" 'NR==1 { print $col1 "\t" $col2; next } FNR==NR { count[$1]++; next } count[$1] >= 3 { print $col1 "\t" $col2 }'  "$temp" "$temp"> "$2"
    rm "$temp"
}

clean_file(){
    clean_columns "$1" "$2" 4 8
    clean_columns "$1" "$3" 5 8
    clean_columns "$1" "$4" 6 8
    clean_columns "$1" "$5" 7 8
}

calculate_result(){
    max_corr=0  # 初始化最大相关系数为 0
    max_file=""  # 初始化最大相关系数对应的文件名为空

    for file in "$@";do
        # 计算Pearson相关系数
        pearson_corr=$(awk -F'\t' '{
            sum1+=$1; sum2+=$2; sum1sq+=$1*$1; sum2sq+=$2*$2; sum12+=$1*$2
        } END {
            if (NR == 0) {
                print "No data available for calculation"
                exit
            }
            mean1=sum1/NR;
            mean2=sum2/NR;
            if (sum1sq == 0 || sum2sq == 0) {
                print "Division by zero attempted"
                exit
            }
            cov=sum12/NR-mean1*mean2;
            sd1=sqrt((sum1sq/NR)-mean1*mean1);
            sd2=sqrt((sum2sq/NR)-mean2*mean2);
            if (sd1 == 0 || sd2 == 0) {
                print "Division by zero attempted"
                exit
            }
            print cov/(sd1*sd2)
        }' "$file")

        # 打印结果
        awk -F'\t' 'NR==1 { print "Mean correlation of " $1 " with Cantril ladder is", '"$pearson_corr"'; exit }' "$file"

        # 取绝对值
        abs_corr=$(echo "$pearson_corr" | awk '{print ($1 < 0) ? -$1 : $1}')

        # 更新最大相关系数和对应的文件名
        if (( $(awk -v corr="$abs_corr" -v max_corr="$max_corr" 'BEGIN {print (corr > max_corr)}') )); then
            max_corr="$pearson_corr"
            max_file="$file"
        fi

    done
    # 打印结果
    awk -F'\t' 'NR==1 { print "Most predictive mean correlation with the Cantril ladder is" $1 "(r =", '"$max_corr"' ")"; exit }' "$max_file"
}

# main function
main() {
    clean_columns48=$(mktemp)
    clean_columns58=$(mktemp)
    clean_columns68=$(mktemp)
    clean_columns78=$(mktemp)

    #文件校验
    check_file_exist "$1"
    check_tab_separator "$1"
    # 检查行数

    
    #先根据第8列，将缺数据的行删除
    #拆分成4个临时文件，分别存第4、5、6、7列的数据
    #删除第二列相同单元格小于三格的行
    clean_file "$1" "$clean_columns48" "$clean_columns58" "$clean_columns68" "$clean_columns78"
  
    # 再次校验

    #计算 （行数*（每行的4、5、6、7列*每行的8列）- 每行的4、5、6、7列的和*每行的8列的和） / （ （行数*第4、5、6、7列的平方的和-第4、5、6、7列的和的平方）*（行数*第8列的平方的和-第8列的和的平方）)^(1/2)
    calculate_result "$clean_columns48" "$clean_columns58" "$clean_columns68" "$clean_columns78"
    # Delete the temporary file
    rm "$clean_columns48" "$clean_columns58" "$clean_columns68" "$clean_columns78"
}

main "$1"