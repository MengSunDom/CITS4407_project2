#!/bin/bash

# Input validation
if [ "$#" -ne 1 ]; then
    echo "Usage: $0 <input_file.tsv>"
    exit 1
fi

# Check if the file exists
check_file_exist() {
    for file in "$@"; do
        if [ ! -f "$file" ]; then
            echo "Input file $file does not exist."
            exit 1
        fi
    done
}

# Check for tab delimitation
check_tab_separator() {
    for file in "$@"; do
        first_line=$(head -n 1 "$file")
        if [[ "$first_line" != *$'\t'* ]]; then
            echo "File $file is not a TSV file."
            exit 1
        fi
    done
}

# Clean columns and remove empty rows
clean_columns(){
    temp=$(mktemp)
    awk -F'\t' -v col1="$3" -v col2="$4" 'NR == 1 || ($col1 != "" && $col2 != "")' "$1" > "$temp"
    awk -F'\t' -v col1="$3" -v col2="$4" 'NR==1 { print $2 "\t" $col1 "\t" $col2; next } FNR==NR { count[$1]++; next } count[$1] >= 3 { print $2 "\t" $col1 "\t" $col2 }' "$temp" "$temp" > "$2"
    rm "$temp"
}

clean_file(){
    clean_columns "$1" "$2" 4 8
    clean_columns "$1" "$3" 5 8
    clean_columns "$1" "$4" 6 8
    clean_columns "$1" "$5" 7 8
}

# Calculate Pearson correlation
calculate_pearson_correlation() {
    file="$1"

    pearson_corr=$(awk -F'\t' 'BEGIN {
            sum_x = sum_y = sum_x_sq = sum_y_sq = sum_xy = 0
            n = 0
        }
        {
            x = $2
            y = $3
            sum_x += x
            sum_y += y
            sum_x_sq += x * x
            sum_y_sq += y * y
            sum_xy += x * y
            n += 1
        }
        END {
            if (n > 1) {
                numerator = n * sum_xy - sum_x * sum_y
                denominator = sqrt((n * sum_x_sq - sum_x^2) * (n * sum_y_sq - sum_y^2))
                if (denominator != 0) {
                    print numerator / denominator
                } else {
                    print 0
                }
            } else {
                print 0
            }
        }' "$file")

    echo "$pearson_corr"
}

# Separate file by Entity
separate_file() {
    local group="$2"
    mkdir -p "split_files_$group"
    awk -F'\t' -v group="$group" 'NR == 1 {header = $0; next} { print > "split_files_" group "/" $1 ".tsv" }' "$1"
}

calculate_result() {
    declare -a Homi_corrs GDP_corrs Pop_corrs Life_corrs
    Homi_cnt=GDP_cnt=Pop_cnt=Life_cnt=0

    for ((index=1; index<=4; index++)) do
        for file in "split_files_$index"/*.tsv; do
            if [ -f "$file" ]; then
                case $index in
                    1)
                        Homi_corrs+=($(calculate_pearson_correlation "$file"))
                        ((Homi_cnt++))
                        ;;
                    2)
                        GDP_corrs+=($(calculate_pearson_correlation "$file"))
                        ((GDP_cnt++))
                        ;;
                    3)
                        Pop_corrs+=($(calculate_pearson_correlation "$file"))
                        ((Pop_cnt++))
                        ;;
                    4)
                        Life_corrs+=($(calculate_pearson_correlation "$file"))
                        ((Life_cnt++))
                        ;;
                esac
            fi
        done
    done

    if [ "$Homi_cnt" -gt 0 ]; then
        Homi_mean=$(echo "${Homi_corrs[@]}" | awk '{for(i=1;i<=NF;i++) sum+=$i} END {printf "%.3f\n", sum/NF}')
        echo "Mean correlation of Homicide Rate with Cantril ladder is $Homi_mean"
    fi
    if [ "$GDP_cnt" -gt 0 ]; then
        GDP_mean=$(echo "${GDP_corrs[@]}" | awk '{for(i=1;i<=NF;i++) sum+=$i} END {printf "%.3f\n", sum/NF}')
        echo "Mean correlation of GDP with Cantril ladder is $GDP_mean"
    fi
    if [ "$Pop_cnt" -gt 0 ]; then
        Pop_mean=$(echo "${Pop_corrs[@]}" | awk '{for(i=1;i<=NF;i++) sum+=$i} END {printf "%.3f\n", sum/NF}')
        echo "Mean correlation of Population with Cantril ladder is $Pop_mean"
    fi
    if [ "$Life_cnt" -gt 0 ]; then
        Life_mean=$(echo "${Life_corrs[@]}" | awk '{for(i=1;i<=NF;i++) sum+=$i} END {printf "%.3f\n", sum/NF}')
        echo "Mean correlation of Life Expectancy with Cantril ladder is $Life_mean"
    fi

    max_variable=$(echo -e "$Homi_mean Homicide Rate\n$GDP_mean GDP\n$Pop_mean Population\n$Life_mean Life Expectancy" | 
    awk '{ value = ($1 < 0) ? -$1 : $1; if (value > max_value) { max_value = value; max_line = $0 } }
        END { print max_line }')

    max_value=$(echo $max_variable | awk '{print $1}')
    max_name=$(echo $max_variable | awk '{print $2}')

    echo "Most predictive mean correlation with the Cantril ladder is $max_name ( r = $max_value )"
}

# Main function
main() {
    clean_columns48=$(mktemp)
    clean_columns58=$(mktemp)
    clean_columns68=$(mktemp)
    clean_columns78=$(mktemp)

    # Validate the input file
    check_file_exist "$1"
    check_tab_separator "$1"

    # Clean and prepare the columns
    clean_file "$1" "$clean_columns48" "$clean_columns58" "$clean_columns68" "$clean_columns78"

    # Validate the cleaned files
    check_file_exist "$clean_columns48" "$clean_columns58" "$clean_columns68" "$clean_columns78"

    # Separate files by the first column
    separate_file "$clean_columns48" 2
    separate_file "$clean_columns58" 3
    separate_file "$clean_columns68" 1
    separate_file "$clean_columns78" 4

    # Calculate and display results
    calculate_result

    # Clean up temporary files and directories
    rm "$clean_columns48" "$clean_columns58" "$clean_columns68" "$clean_columns78"
    rm -rf split_files_*
}

main "$1"
